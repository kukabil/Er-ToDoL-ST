
"""Er-ToDoLIST

Automatically generated by Colab.

Original file is located at
   
"""

# =======================
# Er-ToDoLIST UYGULAMASI
# =======================

import json
from datetime import datetime

DOSYA_ADI = "gorevler.json"
gorevler = []


def gorevleri_yukle():
    global gorevler
    try:
        with open(DOSYA_ADI, "r", encoding="utf-8") as f:
            gorevler = json.load(f)
        print("Görevler başarıyla yüklendi.")
    except FileNotFoundError:
        print("Görev dosyası bulunamadı. Yeni liste oluşturuldu.")
        gorevler = []
    except Exception as e:
        print(f"Dosya okunurken hata oluştu: {e}")
        gorevler = []


def gorevleri_kaydet():
    try:
        with open(DOSYA_ADI, "w", encoding="utf-8") as f:
            json.dump(gorevler, f, ensure_ascii=False, indent=4)
        print("Görevler başarıyla kaydedildi.")
    except Exception as e:
        print(f"Dosya kaydedilirken hata oluştu: {e}")


def tarih_dogrula(tarih_str):
    """Girilen tarihi kontrol eder, doğruysa döndürür, yanlışsa None."""
    try:
        datetime.strptime(tarih_str, "%d.%m.%Y")
        return tarih_str
    except ValueError:
        return None


def gorevleri_listele():
    if not gorevler:
        print("Henüz görev bulunmamaktadır.")
        return

    print("\n--- GÖREV LİSTESİ ---")
    for i, g in enumerate(gorevler, start=1):
        durum = "✔ Tamamlandı" if g["durum"] else "✘ Tamamlanmadı"
        print(f"{i}. {g['metin']} | Durum: {durum} | Öncelik: {g['oncelik']} | Son Tarih: {g['son_tarih']}")
    print("--------------------")



def gorev_ekle():
    metin = input("Yeni görev: ").strip()
    if not metin:
        print("Boş görev eklenemez!")
        return


    oncelik = input("Öncelik (1=Yüksek, 2=Orta, 3=Düşük): ").strip()
    if oncelik not in ["1", "2", "3"]:
        print("Geçersiz öncelik! Varsayılan=2 (Orta) atandı.")
        oncelik = "2"


    tarih = input("Son tarih (gg.aa.yyyy): ").strip()
    if tarih:
        tarih = tarih_dogrula(tarih)
        if not tarih:
            print("Geçersiz tarih formatı! (gg.aa.yyyy) Varsayılan=Belirtilmedi.")
            tarih = "Belirtilmedi"
    else:
        tarih = "Belirtilmedi"

    gorevler.append({"metin": metin, "durum": False, "oncelik": int(oncelik), "son_tarih": tarih})
    print(f"'{metin}' görevi eklendi.")
    gorevleri_kaydet()


def gorev_sil():
    if not gorevler:
        print("Liste boş, silinecek görev yok.")
        return
    gorevleri_listele()
    try:
        numara = int(input("Silmek istediğiniz görev numarası: "))
        if 1 <= numara <= len(gorevler):
            silinen = gorevler.pop(numara - 1)
            print(f"'{silinen['metin']}' görevi silindi.")
            gorevleri_kaydet()
        else:
            print("Geçersiz görev numarası!")
    except ValueError:
        print("Lütfen sayı girin!")


def gorev_duzenle():
    if not gorevler:
        print("Liste boş, düzenlenecek görev yok.")
        return
    gorevleri_listele()
    try:
        numara = int(input("Düzenlemek istediğiniz görev numarası: "))
        if 1 <= numara <= len(gorevler):
            g = gorevler[numara - 1]
            yeni = input(f"Yeni metin ({g['metin']}): ").strip()
            if yeni:
                g["metin"] = yeni
            yeni_oncelik = input(f"Yeni öncelik [1=Yüksek,2=Orta,3=Düşük] ({g['oncelik']}): ").strip()
            if yeni_oncelik in ["1", "2", "3"]:
                g["oncelik"] = int(yeni_oncelik)
            yeni_tarih = input(f"Yeni son tarih ({g['son_tarih']}): ").strip()
            if yeni_tarih:
                tarih = tarih_dogrula(yeni_tarih)
                if tarih:
                    g["son_tarih"] = tarih
                else:
                    print("Geçersiz tarih, önceki korunacak.")
            gorevleri_kaydet()
            print("Görev güncellendi.")
        else:
            print("Geçersiz görev numarası!")
    except ValueError:
        print("Lütfen sayı girin!")


def gorev_durum_degistir():
    if not gorevler:
        print("Liste boş.")
        return
    gorevleri_listele()
    try:
        numara = int(input("Durumunu değiştirmek istediğiniz görev numarası: "))
        if 1 <= numara <= len(gorevler):
            gorevler[numara - 1]["durum"] = not gorevler[numara - 1]["durum"]
            print("Durum güncellendi.")
            gorevleri_kaydet()
        else:
            print("Geçersiz numara!")
    except ValueError:
        print("Lütfen sayı girin!")


def gorevleri_sirala():
    if not gorevler:
        print("Liste boş.")
        return
    print("\nSıralama kriterleri:")
    print("1 - Önceliğe göre (Yüksek→Düşük)")
    print("2 - Son tarihe göre (En yakın→Uzak)")
    secim = input("Seçiminiz: ").strip()

    if secim == "1":
        sirali = sorted(gorevler, key=lambda g: g["oncelik"])
    elif secim == "2":
        def tarih_key(g):
            try:
                return datetime.strptime(g["son_tarih"], "%d.%m.%Y")
            except:
                return datetime.max
        sirali = sorted(gorevler, key=tarih_key)
    else:
        print("Geçersiz seçim!")
        return

    print("\n--- SIRALANMIŞ GÖREVLER ---")
    for i, g in enumerate(sirali, start=1):
        durum = "✔" if g["durum"] else "✘"
        print(f"{i}. {g['metin']} | {durum} | Öncelik: {g['oncelik']} | Son Tarih: {g['son_tarih']}")
    print("----------------------------")



def menu():
    print("\n--- Er-ToDoLIST UYGULAMASI ---")
    print("1. Görevleri Listele")
    print("2. Yeni Görev Eklemek")
    print("3. Görev Düzenlenemesi")
    print("4. Görev Silme")
    print("5. Görev Durumu Değiştir (Görev Tamamlandı/Görev Tamamlanmadı)")
    print("6. Görevleri Sıralanmaktadır")
    print("7. Çıkış yapılıyor")
    return input("Seçiminiz (1-7): ").strip()



def main():
    print("Er-ToDoLIST Uygulamasına Hoş Geldiniz!")
    gorevleri_yukle()
    while True:
        secim = menu()
        if secim == "1":
            gorevleri_listele()
        elif secim == "2":
            gorev_ekle()
        elif secim == "3":
            gorev_duzenle()
        elif secim == "4":
            gorev_sil()
        elif secim == "5":
            gorev_durum_degistir()
        elif secim == "6":
            gorevleri_sirala()
        elif secim == "7":
            print("Program sonlandırılıyor...")
            break
        else:
            print("Geçersiz seçim, tekrar deneyin.")



main()

from google.colab import drive
drive.mount('/content/drive')
